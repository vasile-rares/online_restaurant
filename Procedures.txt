USE [RestaurantDB]
GO
/****** Object:  StoredProcedure [dbo].[GetActiveOrders]    Script Date: 5/23/2025 10:13:34 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[GetActiveOrders]
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT o.IdOrder, o.IdUser, o.OrderDate, o.Status, o.TotalAmount
    FROM Orders o
    WHERE o.Status != 'delivered' AND o.Status != 'canceled'
    ORDER BY o.OrderDate DESC;
END 




USE [RestaurantDB]
GO
/****** Object:  StoredProcedure [dbo].[GetUserByEmail]    Script Date: 5/23/2025 10:13:50 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[GetUserByEmail]
    @Email nvarchar(255)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT *
    FROM Users
    WHERE Email = @Email;
END



USE [RestaurantDB]
GO
/****** Object:  StoredProcedure [dbo].[UpdateOrderStatus]    Script Date: 5/23/2025 10:14:00 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[UpdateOrderStatus]
    @IdOrder UNIQUEIDENTIFIER,
    @NewStatus NVARCHAR(50)
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (
        SELECT 1 FROM Orders
        WHERE IdOrder = @IdOrder
    )
    BEGIN
        RAISERROR('Order not found.', 16, 1);
        RETURN;
    END

    IF @NewStatus NOT IN ('registered', 'preparing', 'out for delivery', 'delivered', 'canceled')
    BEGIN
        RAISERROR('Invalid status value.', 16, 1);
        RETURN;
    END

    UPDATE Orders
    SET Status = @NewStatus
    WHERE IdOrder = @IdOrder;
END







USE [RestaurantDB]
GO
/****** Object:  StoredProcedure [dbo].[VerifyUniqueEmail]    Script Date: 5/23/2025 10:14:06 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[VerifyUniqueEmail]
    @Email nvarchar(255),
    @UserId int = NULL
AS
BEGIN
    SET NOCOUNT ON;
    
    IF @UserId IS NULL
        BEGIN
            -- Case for new user registration
            SELECT CASE 
                WHEN EXISTS (SELECT 1 FROM Users WHERE Email = @Email) 
                THEN 0   -- False (email exists)
                ELSE 1   -- True (email is unique)
            END AS IsUnique;
        END
    ELSE
        BEGIN
            -- Case for existing user update
            SELECT CASE 
                WHEN EXISTS (SELECT 1 FROM Users WHERE Email = @Email AND IdUser != @UserId) 
                THEN 0   -- False (email exists for different user)
                ELSE 1   -- True (email is unique or belongs to current user)
            END AS IsUnique;
        END
END





USE [RestaurantDB]
GO
/****** Object:  StoredProcedure [dbo].[GetOrderById]    Script Date: 5/23/2025 10:24:33 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE [dbo].[GetOrderById]
    @OrderId uniqueidentifier
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        o.IdOrder, o.IdUser, o.OrderDate, o.Status, o.TotalAmount,
        u.IdUser, u.FirstName, u.LastName, u.Email, u.Role,
        od.IdOrderDish, od.IdOrder AS OrderDishOrderId, od.IdDish AS OrderDishId, od.Quantity AS OrderDishQuantity,
        d.IdDish, d.Name AS DishName, d.IdCategory AS DishCategory, d.Price AS DishPrice, 
        d.PortionSize AS DishPortionSize, d.TotalQuantity AS DishQuantity,
        om.IdOrderMenu, om.IdOrder AS OrderMenuOrderId, om.IdMenu, om.Quantity AS OrderMenuQuantity,
        m.IdMenu AS MenuId, m.Name AS MenuName, m.IdCategory AS MenuCategory,
        md.IdMenuDish, md.IdMenu AS MenuDishMenuId, md.IdDish AS MenuDishId, md.Quantity AS MenuDishQuantity,
        d2.IdDish AS MenuDishDishId, d2.Name AS MenuDishDishName, d2.IdCategory AS MenuDishDishCategory,
        d2.Price AS MenuDishDishPrice, d2.PortionSize AS MenuDishDishPortionSize, 
        d2.TotalQuantity AS MenuDishDishQuantity
    FROM Orders o
    LEFT JOIN Users u ON o.IdUser = u.IdUser
    LEFT JOIN OrderDishes od ON o.IdOrder = od.IdOrder
    LEFT JOIN Dishes d ON od.IdDish = d.IdDish
    LEFT JOIN OrderMenus om ON o.IdOrder = om.IdOrder
    LEFT JOIN Menus m ON om.IdMenu = m.IdMenu
    LEFT JOIN MenuDishes md ON m.IdMenu = md.IdMenu
    LEFT JOIN Dishes d2 ON md.IdDish = d2.IdDish
    WHERE o.IdOrder = @OrderId;
END 
